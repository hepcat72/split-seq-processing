[[Category: LSI]]
[[Category: HTSEQ]]
[[Category: SPLiT-Seq]]

<markdown>

## Overview

* The LSI Genomics Core facility generates and sequences [SplitBio](https://www.splitbiosciences.com/) libraries.

* SplitBio libraries require specialized analysis using [SPLiT-Seq software](https://sites.google.com/uw.edu/splitseq/).

## General analysis notes

* Analyses are run on [`cetus`](http://genomics.princeton.edu/support/grids/cetus.shtml) nodes (usually via submission from `gen-comp2`).

* Modules are not yet available for the SPLiT-Seq software, but can be installed in a virtualenv using your own user account

* Use `/scratch/tmp/<username>` to temporarily store data and analysis results

* Download the files from HTSEQ and create symbolic links that use the [`bcl2fastq` naming convention](https://support.10xgenomics.com/de-novo-assembly/software/pipelines/latest/using/fastq-input#wrongname):

>    `[Sample Name]`_S1_L00`[Lane Number]`_`[Read Type]`_001.fastq.gz
>
>    Where `Read Type` is one of:
>
>    * `I1`: Sample index read (i7, optional)
>    * `R1`: Read 1 (66 nt mRNA reads)
>    * `R2`: Read 2 (94 nt reads containing UMI and barcodes)
>
>    | Read Number            | Split Read Type |
>    |------------------------|-----------------|
>    | Read 1 - Forward Read  | `R1`            |
>    | Read 2 - I7 Index      | `I1`            |
>    | Read 3 - I5 Index      | `NA`            |
>    | Read 4 - Reverse Read  | `R2`            | 

* Use scripts to run the analysis:
  * [SPLiT-Seq mkref](https://gist.github.com/hepcat72/df8fe2186286b1eca323787699f1a541#file-splitseq_mkref-sh) - make a reference (from 1 or more fasta files)
  * [SPLiT-Seq run](https://gist.github.com/hepcat72/df8fe2186286b1eca323787699f1a541#file-splitseq_run-sh) - single cell demultiplexing
  * [SPLiT-Seq combine](https://gist.github.com/hepcat72/df8fe2186286b1eca323787699f1a541#file-splitseq_combine-sh) - combine separate sequencing runs to build sample(s)

These scripts must be run from the virtualenv directory created in the install procedure below.  Commands `run` and `mkref` are configured to use 16 threads and they need a large amount of memory, depending on the reference size.  For a human/mouse combo, these parameters worked for the cetus cluster:

* `--ntasks-per-node 16`
* `--constraint springdale7`
* `--mem 228000`

The jobs will fail if they get onto the one springdale6 node (which has happened during testing).

## Install

Here's an example install using a virtual environment:

> `mkdir splitseq`
> 
> `virtualenv -p /usr/local/python/3.6.4/bin/python3 ./splitseq`
> 
> `cd splitseq`
> 
> `./bin/pip install cython`
> 
> `./bin/pip install pandas`
> 
> `./bin/pip install scipy`
> 
> `./bin/pip install matplotlib`
> 
> `mkdir src`
> 
> `cd src`
> 
> `git clone https://github.com/Alex-Rosenberg/split-seq-pipeline.git`
> 
> `cd split-seq-pipeline`
> 
> `export HTSLIB_CONFIGURE_OPTIONS=--disable-bz2`
> 
> `../../bin/pip install -e .`

## Creating References

An example dual reference creation:

> `wget ftp://ftp.ensembl.org/pub/release-93/fasta/homo_sapiens/dna/Homo_sapiens.GRCh38.dna.primary_assembly.fa.gz`
> 
> `gunzip Homo_sapiens.GRCh38.dna.primary_assembly.fa.gz`
> 
> 
> `wget ftp://ftp.ensembl.org/pub/release-93/gtf/homo_sapiens/Homo_sapiens.GRCh38.93.gtf.gz`
> 
> `gunzip Homo_sapiens.GRCh38.93.gtf.gz`
> 
> 
> `wget ftp://ftp.ensembl.org/pub/release-93/fasta/mus_musculus/dna/Mus_musculus.GRCm38.dna.primary_assembly.fa.gz`
> 
> `gunzip Mus_musculus.GRCm38.dna.primary_assembly.fa.gz`
> 
> 
> `wget ftp://ftp.ensembl.org/pub/release-93/gtf/mus_musculus/Mus_musculus.GRCm38.93.gtf.gz`
> 
> `gunzip Mus_musculus.GRCm38.93.gtf.gz`
> 
> 
> `splitseq_mkref.sh "hg38 mm10" "Homo_sapiens.GRCh38.dna.primary_assembly.fa Mus_musculus.GRCm38.dna.primary_assembly.fa" "Homo_sapiens.GRCh38.93.gtf Mus_musculus.GRCm38.93.gtf"`

A reference is created in the splitseq_refs directory in the virtual environment named using a join of the genome names delimited by underscores.

## Running

### Overview

SPLiT-Seq sequencing is typically done in multiple runs and produces 3 files each time:

1. Forward (mRNA reads (66 nt))
2. Reverse (reads contain UMI and barcodes (94 nt))
3. Index (i7)

The split-seq pipeline is run and then all the results of the split-seq runs are combined.

### Workflow

The following scripts assume a virtual environment and will create directories:

> `splitseq_runs`

> `splitseq_refs`

Including building a reference and standard demultiplexing, there are 4 phases in the analysis:

* Build a reference from fasta file(s)

> `splitseq_mkref.sh "genome names" "fasta files" "gtf files"`
> 
> Each of the 3 parameters can contain multiple space-delimited values wrapped in quotes (in order to align to multiple genomes at once).  Example:
> 
> `splitseq_mkref.sh "hg38 mm10" "human.fa mouse.fa" "human.gtf mouse.gtf"`
> 
> The genome names are joined with delimiting underscores and an output directory is created in the splitseq_refs subdirectory.

* Demultiplexing with the index happens per run as usual.
* Split-seq pipeline:

> `splitseq_run.sh run_id read1.fastq.gz read2.fastq.gz chemistry reference_directory "sample_name sample_wells"`
> 
> Note that only gzipped fastq files are permitted.  Chemistry, for all intents and purposes is always "v1".  reference_directory is the output directory of the `split-seq mkref` command.  sample_name and sample_wells are 2 strings (containing no whitespaces) separated by a whitespace.  Both values are supplied in quotes.  sample_name can be any alpha-numeric value with underscores.  sample_wells is a well name range specified by 2 well names separated by a colon, e.g. "A1:B6", which indicates wells A1-A12 and B1-B6.  Individual wells and multiple ranges can be specified, separated by commas, e.g. "A1:B6,B8:B12,C3".  Concrete example:
> 
> `splitseq_run.sh run1 mrna.fastq.gz bcumi.fastq.gz v1 hg38_mm10 "sample1 A1:B6"`

* Combine multiple sequencing runs (each of which contains reads potentially from the same sample)

> `splitseq_combine.sh run_id chemistry reference_directory splitseq_all_seq_run_directories "sample_name sample_wells"`
> 
> As above, chemistry, for all intents and purposes is always "v1".  reference_directory is the output directory of the `split-seq mkref` command.  The splitseq_all_seq_run_directories are the output direcories of the various `split-seq all` runs, one for each sequencing run.  sample_name and sample_wells are 2 strings (containing no whitespaces) separated by a whitespace.  Both values are supplied in quotes.  sample_name can be any alpha-numeric value with underscores.  sample_wells is a well name range specified by 2 well names separated by a colon, e.g. "A1:B6", which indicates wells A1-A12 and B1-B6.  Individual wells and multiple ranges can be specified, separated by commas, e.g. "A1:B6,B8:B12,C3".  Concrete example:
> 
> `splitseq_combine.sh run1 v1 hg38_mm10 "sample1 A1:B6"`

</markdown>
